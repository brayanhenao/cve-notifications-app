package main_test

import (
	contextPkg "context"
	"fmt"
	main "github.com/brayanhenao/cve-notification-app/actions/find-new-cves/entrypoint"
	"github.com/brayanhenao/cve-notification-app/utils"
	"github.com/brayanhenao/cve-notification-app/utils/utilsfakes"
	"github.com/sclevine/spec"
	"github.com/sclevine/spec/report"
	assertpkg "github.com/stretchr/testify/assert"
	requirepkg "github.com/stretchr/testify/require"
	"go.mongodb.org/mongo-driver/mongo"
	"testing"
)

func TestEntrypoint(t *testing.T) {
	spec.Run(t, "Entrypoint", testEntrypoint, spec.Report(report.Terminal{}))
}

func testEntrypoint(t *testing.T, context spec.G, it spec.S) {
	var (
		assert         = assertpkg.New(t)
		require        = requirepkg.New(t)
		allUtils       main.AllUtils
		fakeMongoUtils *utilsfakes.FakeMongoUtilsInterface
		fakeNVDUtils   *utilsfakes.FakeNVDNistUtilsInterface
		fakeSlackUtils *utilsfakes.FakeSlackUtilsInterface
	)

	it.Before(func() {
		fakeMongoUtils = &utilsfakes.FakeMongoUtilsInterface{}
		fakeNVDUtils = &utilsfakes.FakeNVDNistUtilsInterface{}
		fakeSlackUtils = &utilsfakes.FakeSlackUtilsInterface{}

		allUtils = main.AllUtils{
			MongoUtils:   fakeMongoUtils,
			NVDNistUtils: fakeNVDUtils,
			SlackUtils:   fakeSlackUtils,
		}
	})

	context("Calls the FindNewCVEs method", func() {
		context("succeed", func() {
			it.Before(func() {
				fakeClient := &mongo.Client{}
				fakeCtx := contextPkg.TODO()
				fakeCollection := &mongo.Collection{}

				fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
				fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

				trackedDeps := []utils.CVE{
					{
						Vendor:  "haxx",
						Product: "curl",
					},
					{
						Vendor:  "golang",
						Product: "go",
					},
				}

				fakeMongoUtils.GetUniqueDependenciesReturns(trackedDeps, nil)

				cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
					{
						Id:          "CVE-1",
						Description: "Testing CVE1",
						Severity:    "HIGH",
					},
					{
						Id:          "CVE-2",
						Description: "Testing CVE2",
						Severity:    "LOW",
					},
				})

				cves2 := utils.GenerateFakeCVE([]utils.FakeCVEParam{
					{
						Id:          "CVE-3",
						Description: "Testing CVE3",
						Severity:    "CRITICAL",
					},
					{
						Id:          "CVE-4",
						Description: "Testing CVE4",
						Severity:    "CRITICAL",
					},
				})

				fakeNVDUtils.GetCVEsReturnsOnCall(0, cves, nil)
				fakeNVDUtils.GetCVEsReturnsOnCall(1, cves2, nil)

				fakeMongoUtils.CVEExistsReturnsOnCall(0, true, nil)
				fakeMongoUtils.CVEExistsReturnsOnCall(1, false, nil)
				fakeMongoUtils.CVEExistsReturnsOnCall(2, true, nil)
				fakeMongoUtils.CVEExistsReturnsOnCall(3, false, nil)

				fakeMongoUtils.CreateCVEReturns(nil)
				fakeMongoUtils.DisconnectMongoClientReturns(nil)

				fakeSlackUtils.SendNewCVENotificationReturns(nil)
			})

			it("Find new cves for the tracked dependencies", func() {

				err := main.FindNewCVEs(allUtils)
				require.NoError(err)

				assert.Equal(2, fakeMongoUtils.CreateCVECallCount())

				createdCve1, _, _ := fakeMongoUtils.CreateCVEArgsForCall(0)
				assert.Equal("haxx", createdCve1.Vendor)
				assert.Equal("curl", createdCve1.Product)
				assert.Equal("LOW", createdCve1.Severity)
				assert.Equal("CVE-2", createdCve1.CVEId)
				assert.Equal("Testing CVE2", createdCve1.Description)

				createdCve2, _, _ := fakeMongoUtils.CreateCVEArgsForCall(1)
				assert.Equal("golang", createdCve2.Vendor)
				assert.Equal("go", createdCve2.Product)
				assert.Equal("CRITICAL", createdCve2.Severity)
				assert.Equal("CVE-4", createdCve2.CVEId)
				assert.Equal("Testing CVE4", createdCve2.Description)

				assert.Equal(2, fakeSlackUtils.SendNewCVENotificationCallCount())

				product, id, description, severity := fakeSlackUtils.SendNewCVENotificationArgsForCall(0)
				assert.Equal("curl", product)
				assert.Equal("CVE-2", id)
				assert.Equal("Testing CVE2", description)
				assert.Equal("LOW", severity)

				product2, id2, description2, severity2 := fakeSlackUtils.SendNewCVENotificationArgsForCall(1)
				assert.Equal("go", product2)
				assert.Equal("CVE-4", id2)
				assert.Equal("Testing CVE4", description2)
				assert.Equal("CRITICAL", severity2)
			})
		})

		context("fails", func() {
			context("getting mongo client", func() {
				it.Before(func() {
					fakeMongoUtils.GetMongoClientReturns(nil, nil, fmt.Errorf("client"))
				})

				it("return an error", func() {
					err := main.FindNewCVEs(allUtils)
					require.Error(err)

					assert.Error(err, "client")
				})
			})

			context("getting unique dependencies", func() {
				it.Before(func() {
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)
					fakeMongoUtils.GetUniqueDependenciesReturns(nil, fmt.Errorf("unique-dependencies"))
				})

				it("return an error", func() {
					err := main.FindNewCVEs(allUtils)
					require.Error(err)

					assert.Error(err, "unique-dependencies")
				})
			})

			context("getting CVEs", func() {
				it.Before(func() {
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

					trackedDeps := []utils.CVE{
						{
							Vendor:  "haxx",
							Product: "curl",
						},
						{
							Vendor:  "golang",
							Product: "go",
						},
					}

					fakeMongoUtils.GetUniqueDependenciesReturns(trackedDeps, nil)

					fakeNVDUtils.GetCVEsReturns(utils.NVDNistResponse{}, fmt.Errorf("cves"))
				})

				it("return an error", func() {
					err := main.FindNewCVEs(allUtils)
					require.Error(err)

					assert.Error(err, "cves")
				})
			})

			context("finding CVE in database", func() {
				it.Before(func() {
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

					trackedDeps := []utils.CVE{
						{
							Vendor:  "haxx",
							Product: "curl",
						},
						{
							Vendor:  "golang",
							Product: "go",
						},
					}

					fakeMongoUtils.GetUniqueDependenciesReturns(trackedDeps, nil)

					cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-1",
							Description: "Testing CVE1",
							Severity:    "HIGH",
						},
						{
							Id:          "CVE-2",
							Description: "Testing CVE2",
							Severity:    "LOW",
						},
					})

					fakeNVDUtils.GetCVEsReturns(cves, nil)

					fakeMongoUtils.CVEExistsReturns(false, fmt.Errorf("create-cve"))
				})

				it("return an error", func() {
					err := main.FindNewCVEs(allUtils)
					require.Error(err)

					assert.Error(err, "cve-exists")
				})
			})

			context("creating CVE in database", func() {
				it.Before(func() {
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

					trackedDeps := []utils.CVE{
						{
							Vendor:  "haxx",
							Product: "curl",
						},
						{
							Vendor:  "golang",
							Product: "go",
						},
					}

					fakeMongoUtils.GetUniqueDependenciesReturns(trackedDeps, nil)

					cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-1",
							Description: "Testing CVE1",
							Severity:    "HIGH",
						},
						{
							Id:          "CVE-2",
							Description: "Testing CVE2",
							Severity:    "LOW",
						},
					})

					fakeNVDUtils.GetCVEsReturns(cves, nil)

					fakeMongoUtils.CreateCVEReturns(fmt.Errorf("create-cve"))
				})

				it("return an error", func() {
					err := main.FindNewCVEs(allUtils)
					require.Error(err)

					assert.Error(err, "create-cve")
				})
			})

			context("sending slack message", func() {
				it.Before(func() {
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

					trackedDeps := []utils.CVE{
						{
							Vendor:  "haxx",
							Product: "curl",
						},
						{
							Vendor:  "golang",
							Product: "go",
						},
					}

					fakeMongoUtils.GetUniqueDependenciesReturns(trackedDeps, nil)

					cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-1",
							Description: "Testing CVE1",
							Severity:    "HIGH",
						},
						{
							Id:          "CVE-2",
							Description: "Testing CVE2",
							Severity:    "LOW",
						},
					})

					fakeNVDUtils.GetCVEsReturns(cves, nil)

					fakeMongoUtils.CVEExistsReturns(false, nil)
					fakeMongoUtils.CreateCVEReturns(nil)

					fakeSlackUtils.SendNewCVENotificationReturns(fmt.Errorf("slack-notification"))
				})

				it("return an error", func() {
					err := main.FindNewCVEs(allUtils)
					require.Error(err)

					assert.Error(err, "slack-notification")
				})
			})

		})
	})
}
