package main

import (
	"github.com/brayanhenao/cve-notification-app/utils"
	"github.com/jessevdk/go-flags"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"log"
	"os"
	"time"
)

type AllUtils struct {
	MongoUtils   utils.MongoUtilsInterface
	NVDNistUtils utils.NVDNistUtilsInterface
	SlackUtils   utils.SlackUtilsInterface
}

func main() {
	var opts struct {
		DBUri           string `long:"db-uri" description:"Database URI" required:"true"`
		SlackWebhookUrl string `long:"webhook-url" description:"Slack webhook URL" required:"true"`
	}

	_, err := flags.Parse(&opts)
	if err != nil {
		os.Exit(1)
	}

	allUtils := AllUtils{
		utils.NewMongoUtils(opts.DBUri),
		utils.NewNVDNistUtils(),
		utils.NewSlackUtils(opts.SlackWebhookUrl),
	}

	err = FindNewCVEs(allUtils)
	if err != nil {
		log.Fatal(err)
	}
}

func FindNewCVEs(allUtils AllUtils) error {
	mongoClient, ctx, err := allUtils.MongoUtils.GetMongoClient()
	if err != nil {
		return err
	}

	collection := allUtils.MongoUtils.GetMongoCollection(*mongoClient, "buildpacks", "cves")

	trackedDependencies, err := allUtils.MongoUtils.GetUniqueDependencies(ctx, collection)
	if err != nil {
		return err
	}

	for _, trackedDep := range trackedDependencies {
		cves, err := allUtils.NVDNistUtils.GetCVEs(trackedDep.Vendor, trackedDep.Product)
		if err != nil {
			return err
		}

		for _, cveItem := range cves.Result.CVEItems {
			exists, err := allUtils.MongoUtils.CVEExists(cveItem.Cve.CVEDataMeta.ID, ctx, collection)
			if err != nil {
				return err
			}

			if !exists {
				cve := utils.CVE{
					ID:          primitive.NewObjectID(),
					CreatedAt:   time.Now(),
					UpdatedAt:   time.Now(),
					Vendor:      trackedDep.Vendor,
					Product:     trackedDep.Product,
					Severity:    cveItem.Impact.BaseMetricV3.CvssV3.BaseSeverity,
					CVEId:       cveItem.Cve.CVEDataMeta.ID,
					Description: cveItem.Cve.Description.DescriptionData[0].Value,
				}

				err = allUtils.MongoUtils.CreateCVE(&cve, ctx, collection)
				if err != nil {
					return err
				}

				err = allUtils.SlackUtils.SendNewCVENotification(cve.Product, cve.CVEId, cve.Description, cve.Severity)
				if err != nil {
					return err
				}
			}
		}
	}

	return nil
}
